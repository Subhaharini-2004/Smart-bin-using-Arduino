#include <Servo.h>
#include <LiquidCrystal.h>

#define TRIG_PIN_1 7 // Ultrasonic sensor 1 trigger pin
#define ECHO_PIN_1 6 // Ultrasonic sensor 1 echo pin
#define TRIG_PIN_2 13 // Ultrasonic sensor 2 trigger pin
#define ECHO_PIN_2 8 // Ultrasonic sensor 2 echo pin
#define SERVO_PIN 10  // Servo motor pin

int count = 0;
LiquidCrystal lcd(12,11,5,4,3,2);

Servo servoMotor;

void setup() {
  Serial.begin(9600);
  pinMode(TRIG_PIN_1, OUTPUT);
  pinMode(ECHO_PIN_1, INPUT);
  pinMode(TRIG_PIN_2, OUTPUT);
  pinMode(ECHO_PIN_2, INPUT);
  servoMotor.attach(SERVO_PIN);
  // display.setBrightness(0x0a); // Set display brightness (adjust if needed)

  lcd.begin(16, 4);

  lcd.setCursor(4, 0);
  lcd.print("SMART BIN");

  lcd.setCursor(0, 1);
  lcd.print("Count");

  lcd.setCursor(0, 2);
  lcd.print("Capacity");

  lcd.setCursor(0, 3);
  lcd.print("Carbon emission");
}

void loop() {
  int distance1 = getDistance(TRIG_PIN_1, ECHO_PIN_1);
  int distance2 = getDistance(TRIG_PIN_2, ECHO_PIN_2);

  if (distance1 < 20) { // Adjust the distance threshold for lid opening
    servoMotor.write(150); // Open the lid
    delay(3000);
    count++;
    lcd.setCursor( 6,1);
    lcd.print(count);
    //display.showNumberDec(count); 
  } else {
    servoMotor.write(0); // Close the lid
    lcd.setCursor( 6,1);
    lcd.print(count);
  }

  if (distance2 < 10) { // Adjust the distance threshold for bin full
 
     lcd.setCursor(9, 2);
     lcd.print("FULL");
     //display.setSegments(fullSegments);
    //display.showNumberDec(9);  Display '9' indicating bin full
  }
  else {
    // Calculate and display the waste amount filled in the dustbin based on distance1, if needed
    int wasteAmount = map(distance2, 0, 50, 0, 100); // Map distance to waste amount (adjust as per requirement)
     lcd.setCursor(9, 2);
     lcd.print(wasteAmount);

    //Serial.println(wasteAmount);
    //display.showNumberDec(wasteAmount); // Display waste amount
  } 

  delay(500); // Delay between sensor readings, adjust as needed
}

int getDistance(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duration = pulseIn(echoPin, HIGH);
  int distance = duration * 0.034 / 2; // Calculate distance in centimeters
  return distance;
}
